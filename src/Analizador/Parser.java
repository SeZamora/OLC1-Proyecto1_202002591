
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import DatosJson.Acciones;
import VariablesGlobales.FuncionesGlobales;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\010\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\025\010\000" +
    "\002\032\003\000\002\032\004\000\002\033\007\000\002" +
    "\033\007\000\002\033\016\000\002\033\016\000\002\012" +
    "\011\000\002\012\011\000\002\012\006\000\002\023\007" +
    "\000\002\014\011\000\002\015\003\000\002\015\004\000" +
    "\002\016\010\000\002\016\006\000\002\016\005\000\002" +
    "\016\007\000\002\020\024\000\002\021\011\000\002\022" +
    "\015\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\007\000\002\007" +
    "\007\000\002\007\007\000\002\007\007\000\002\007\007" +
    "\000\002\007\006\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\005\000\002\024\003\000" +
    "\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\032\007\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\002\351\001\002" +
    "\000\004\055\010\001\002\000\004\056\011\001\002\000" +
    "\004\053\012\001\002\000\042\003\032\006\041\007\024" +
    "\010\020\011\042\012\037\013\031\016\036\027\015\030" +
    "\023\031\014\033\033\034\026\035\040\044\034\065\013" +
    "\001\002\000\004\026\346\001\002\000\004\065\341\001" +
    "\002\000\004\065\334\001\002\000\050\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\044\ufff1\054\ufff1\065\ufff1\001\002\000\050\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\027\ufff9\030\ufff9\031\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\044\ufff9\054\ufff9\065\ufff9\001\002" +
    "\000\004\055\313\001\002\000\050\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\044\ufffb\054\ufffb\065\ufffb\001\002\000\050\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\044\ufff7\054\ufff7\065\ufff7\001\002\000" +
    "\004\065\306\001\002\000\004\065\301\001\002\000\050" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\027\uffef\030\uffef\031\uffef" +
    "\033\uffef\034\uffef\035\uffef\044\uffef\054\uffef\065\uffef\001" +
    "\002\000\004\055\273\001\002\000\042\006\041\007\024" +
    "\010\020\011\042\012\037\013\031\016\036\027\015\030" +
    "\023\031\014\033\033\034\026\035\040\044\034\054\272" +
    "\065\013\001\002\000\050\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\044" +
    "\ufffd\054\ufffd\065\ufffd\001\002\000\004\055\253\001\002" +
    "\000\050\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\027\uffed\030\uffed" +
    "\031\uffed\033\uffed\034\uffed\035\uffed\044\uffed\054\uffed\065" +
    "\uffed\001\002\000\004\055\245\001\002\000\004\055\202" +
    "\001\002\000\050\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\033\ufff3\034\ufff3\035\ufff3\044\ufff3\054" +
    "\ufff3\065\ufff3\001\002\000\004\055\157\001\002\000\004" +
    "\053\137\001\002\000\004\053\134\001\002\000\004\065" +
    "\127\001\002\000\004\055\044\001\002\000\050\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\044\ufff5\054\ufff5\065\ufff5\001\002\000" +
    "\024\004\052\005\047\014\054\022\046\024\050\055\056" +
    "\064\045\065\051\066\053\001\002\000\042\014\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\051\uffc6\052\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\001\002\000\042\014\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\051\uffb2\052\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\001\002\000\042\014\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\051\uffc3\052\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002\000" +
    "\042\014\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\051\uffb1\052" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002\000\042\014\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\051\uffb4\052\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\001\002\000\042\014\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\051\uffc4\052\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\001\002\000\042\014\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\051\uffc5\052\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002" +
    "\000\042\014\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\051\uffb3" +
    "\052\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002\000\036\014" +
    "\070\022\061\023\073\024\063\025\071\036\062\037\065" +
    "\040\064\041\072\042\074\043\066\051\060\052\075\056" +
    "\113\001\002\000\024\004\052\005\047\014\054\022\046" +
    "\024\050\055\056\064\045\065\051\066\053\001\002\000" +
    "\036\014\070\022\061\023\073\024\063\025\071\036\062" +
    "\037\065\040\064\041\072\042\074\043\066\051\060\052" +
    "\075\056\067\001\002\000\024\004\052\005\047\014\054" +
    "\022\046\024\050\055\056\064\045\065\051\066\053\001" +
    "\002\000\024\004\052\005\047\014\054\022\046\024\050" +
    "\055\056\064\045\065\051\066\053\001\002\000\024\004" +
    "\052\005\047\014\054\022\046\024\050\055\056\064\045" +
    "\065\051\066\053\001\002\000\024\004\052\005\047\014" +
    "\054\022\046\024\050\055\056\064\045\065\051\066\053" +
    "\001\002\000\024\004\052\005\047\014\054\022\046\024" +
    "\050\055\056\064\045\065\051\066\053\001\002\000\024" +
    "\004\052\005\047\014\054\022\046\024\050\055\056\064" +
    "\045\065\051\066\053\001\002\000\024\004\052\005\047" +
    "\014\054\022\046\024\050\055\056\064\045\065\051\066" +
    "\053\001\002\000\042\014\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\051\uffb5\052\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002" +
    "\000\024\004\052\005\047\014\054\022\046\024\050\055" +
    "\056\064\045\065\051\066\053\001\002\000\024\004\052" +
    "\005\047\014\054\022\046\024\050\055\056\064\045\065" +
    "\051\066\053\001\002\000\024\004\052\005\047\014\054" +
    "\022\046\024\050\055\056\064\045\065\051\066\053\001" +
    "\002\000\024\004\052\005\047\014\054\022\046\024\050" +
    "\055\056\064\045\065\051\066\053\001\002\000\024\004" +
    "\052\005\047\014\054\022\046\024\050\055\056\064\045" +
    "\065\051\066\053\001\002\000\024\004\052\005\047\014" +
    "\054\022\046\024\050\055\056\064\045\065\051\066\053" +
    "\001\002\000\042\014\070\022\061\023\073\024\063\025" +
    "\071\036\062\037\065\040\064\041\072\042\074\043\uffb6" +
    "\051\uffb6\052\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000" +
    "\042\014\070\022\061\023\073\024\063\025\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\051\uffb9\052" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000\042\014\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\051\uffbf\052\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\001\002\000\042\014\070\022\061\023" +
    "\073\024\063\025\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\051\uffbc\052\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\001\002\000\042\014\070\022\061\023\073\024\063" +
    "\025\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\051\uffbe\052\uffbe\056\uffbe\057\uffbe\060\uffbe\001\002" +
    "\000\042\014\uffc2\022\uffc2\023\073\024\063\025\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\051\uffc2" +
    "\052\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002\000\042\014" +
    "\070\022\061\023\073\024\063\025\071\036\062\037\065" +
    "\040\064\041\072\042\074\043\uffb8\051\uffb8\052\075\056" +
    "\uffb8\057\uffb8\060\uffb8\001\002\000\042\014\070\022\061" +
    "\023\073\024\063\025\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\051\uffbb\052\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\001\002\000\042\014\070\022\061\023\073\024" +
    "\063\025\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\051\uffba\052\uffba\056\uffba\057\uffba\060\uffba\001" +
    "\002\000\042\014\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\051" +
    "\uffc0\052\uffc0\056\uffc0\057\uffc0\060\uffc0\001\002\000\042" +
    "\014\070\022\061\023\073\024\063\025\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\051\uffbd\052\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\001\002\000\042\014\uffc1\022" +
    "\uffc1\023\073\024\063\025\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\051\uffc1\052\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\001\002\000\042\014\070\022\061\023\073" +
    "\024\063\025\071\036\062\037\065\040\064\041\072\042" +
    "\074\043\066\051\uffb7\052\075\056\uffb7\057\uffb7\060\uffb7" +
    "\001\002\000\004\053\114\001\002\000\042\003\032\006" +
    "\041\007\024\010\020\011\042\012\037\013\031\016\036" +
    "\027\015\030\023\031\014\033\033\034\026\035\040\044" +
    "\034\065\013\001\002\000\042\006\041\007\024\010\020" +
    "\011\042\012\037\013\031\016\036\027\015\030\023\031" +
    "\014\033\033\034\026\035\040\044\034\054\121\065\013" +
    "\001\002\000\050\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\044\ufff0\054" +
    "\ufff0\065\ufff0\001\002\000\050\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\044\ufff8\054\ufff8\065\ufff8\001\002\000\050\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\027\ufffa\030\ufffa\031\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\044\ufffa\054\ufffa\065\ufffa\001\002\000\050" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\044\uffd9\054\uffd9\065\uffd9\001" +
    "\002\000\050\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\044\ufff6\054\ufff6" +
    "\065\ufff6\001\002\000\050\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\027\uffee\030\uffee\031\uffee\033\uffee\034\uffee\035\uffee\044" +
    "\uffee\054\uffee\065\uffee\001\002\000\050\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\044\ufffc\054\ufffc\065\ufffc\001\002\000\050\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\027\ufff2\030\ufff2\031\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\044\ufff2\054\ufff2\065\ufff2\001\002" +
    "\000\050\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\033\ufff4\034\ufff4\035\ufff4\044\ufff4\054\ufff4\065" +
    "\ufff4\001\002\000\006\026\130\060\131\001\002\000\024" +
    "\004\052\005\047\014\054\022\046\024\050\055\056\064" +
    "\045\065\051\066\053\001\002\000\050\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\044\uffd1\054\uffd1\065\uffd1\001\002\000\036\014" +
    "\070\022\061\023\073\024\063\025\071\036\062\037\065" +
    "\040\064\041\072\042\074\043\066\051\060\052\075\060" +
    "\133\001\002\000\050\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\044\uffcc" +
    "\054\uffcc\065\uffcc\001\002\000\042\003\032\006\041\007" +
    "\024\010\020\011\042\012\037\013\031\016\036\027\015" +
    "\030\023\031\014\033\033\034\026\035\040\044\034\065" +
    "\013\001\002\000\042\006\041\007\024\010\020\011\042" +
    "\012\037\013\031\016\036\027\015\030\023\031\014\033" +
    "\033\034\026\035\040\044\034\054\136\065\013\001\002" +
    "\000\050\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\033\uffe3\034\uffe3\035\uffe3\044\uffe3\054\uffe3\065" +
    "\uffe3\001\002\000\042\003\032\006\041\007\024\010\020" +
    "\011\042\012\037\013\031\016\036\027\015\030\023\031" +
    "\014\033\033\034\026\035\040\044\034\065\013\001\002" +
    "\000\042\006\041\007\024\010\020\011\042\012\037\013" +
    "\031\016\036\027\015\030\023\031\014\033\033\034\026" +
    "\035\040\044\034\054\141\065\013\001\002\000\004\011" +
    "\142\001\002\000\004\055\143\001\002\000\004\065\144" +
    "\001\002\000\016\025\153\036\152\037\147\040\151\041" +
    "\146\042\150\001\002\000\004\066\154\001\002\000\004" +
    "\066\uffd3\001\002\000\004\066\uffd5\001\002\000\004\066" +
    "\uffd2\001\002\000\004\066\uffd4\001\002\000\004\066\uffd6" +
    "\001\002\000\004\066\uffd7\001\002\000\004\056\155\001" +
    "\002\000\004\060\156\001\002\000\050\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\044\uffd8\054\uffd8\065\uffd8\001\002\000\024\004" +
    "\052\005\047\014\054\022\046\024\050\055\056\064\045" +
    "\065\051\066\053\001\002\000\036\014\070\022\061\023" +
    "\073\024\063\025\071\036\062\037\065\040\064\041\072" +
    "\042\074\043\066\051\060\052\075\056\161\001\002\000" +
    "\004\053\162\001\002\000\006\017\165\021\163\001\002" +
    "\000\004\057\176\001\002\000\010\017\165\021\163\054" +
    "\174\001\002\000\024\004\052\005\047\014\054\022\046" +
    "\024\050\055\056\064\045\065\051\066\053\001\002\000" +
    "\010\017\uffe0\021\uffe0\054\uffe0\001\002\000\036\014\070" +
    "\022\061\023\073\024\063\025\071\036\062\037\065\040" +
    "\064\041\072\042\074\043\066\051\060\052\075\057\170" +
    "\001\002\000\042\003\032\006\041\007\024\010\020\011" +
    "\042\012\037\013\031\016\036\027\015\030\023\031\014" +
    "\033\033\034\026\035\040\044\034\065\013\001\002\000" +
    "\050\006\041\007\024\010\020\011\042\012\037\013\031" +
    "\016\036\017\uffdd\020\172\021\uffdd\027\015\030\023\031" +
    "\014\033\033\034\026\035\040\044\034\054\uffdd\065\013" +
    "\001\002\000\004\060\173\001\002\000\010\017\uffde\021" +
    "\uffde\054\uffde\001\002\000\050\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\044\uffe1\054\uffe1\065\uffe1\001\002\000\010\017\uffdf\021" +
    "\uffdf\054\uffdf\001\002\000\042\003\032\006\041\007\024" +
    "\010\020\011\042\012\037\013\031\016\036\027\015\030" +
    "\023\031\014\033\033\034\026\035\040\044\034\065\013" +
    "\001\002\000\050\006\041\007\024\010\020\011\042\012" +
    "\037\013\031\016\036\017\uffdc\020\200\021\uffdc\027\015" +
    "\030\023\031\014\033\033\034\026\035\040\044\034\054" +
    "\uffdc\065\013\001\002\000\004\060\201\001\002\000\010" +
    "\017\uffdb\021\uffdb\054\uffdb\001\002\000\004\056\203\001" +
    "\002\000\004\053\204\001\002\000\006\007\207\031\210" +
    "\001\002\000\010\007\uffeb\031\uffeb\054\uffeb\001\002\000" +
    "\010\007\207\031\210\054\243\001\002\000\004\065\226" +
    "\001\002\000\004\065\211\001\002\000\004\026\212\001" +
    "\002\000\006\047\213\064\214\001\002\000\004\053\216" +
    "\001\002\000\004\060\215\001\002\000\010\007\uffe9\031" +
    "\uffe9\054\uffe9\001\002\000\004\050\217\001\002\000\004" +
    "\061\220\001\002\000\004\064\221\001\002\000\004\061" +
    "\222\001\002\000\004\064\223\001\002\000\004\054\224" +
    "\001\002\000\004\060\225\001\002\000\010\007\uffe7\031" +
    "\uffe7\054\uffe7\001\002\000\004\026\227\001\002\000\006" +
    "\047\230\066\231\001\002\000\004\053\233\001\002\000" +
    "\004\060\232\001\002\000\010\007\uffe8\031\uffe8\054\uffe8" +
    "\001\002\000\004\050\234\001\002\000\004\061\235\001" +
    "\002\000\004\064\236\001\002\000\004\061\237\001\002" +
    "\000\004\064\240\001\002\000\004\054\241\001\002\000" +
    "\004\060\242\001\002\000\010\007\uffe6\031\uffe6\054\uffe6" +
    "\001\002\000\050\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\016\uffec\017\uffec\020\uffec\021\uffec\027\uffec" +
    "\030\uffec\031\uffec\033\uffec\034\uffec\035\uffec\044\uffec\054" +
    "\uffec\065\uffec\001\002\000\010\007\uffea\031\uffea\054\uffea" +
    "\001\002\000\024\004\052\005\047\014\054\022\046\024" +
    "\050\055\056\064\045\065\051\066\053\001\002\000\036" +
    "\014\070\022\061\023\073\024\063\025\071\036\062\037" +
    "\065\040\064\041\072\042\074\043\066\051\060\052\075" +
    "\056\247\001\002\000\004\053\250\001\002\000\042\003" +
    "\032\006\041\007\024\010\020\011\042\012\037\013\031" +
    "\016\036\027\015\030\023\031\014\033\033\034\026\035" +
    "\040\044\034\065\013\001\002\000\042\006\041\007\024" +
    "\010\020\011\042\012\037\013\031\016\036\027\015\030" +
    "\023\031\014\033\033\034\026\035\040\044\034\054\252" +
    "\065\013\001\002\000\050\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\044" +
    "\uffe5\054\uffe5\065\uffe5\001\002\000\024\004\257\005\256" +
    "\014\054\022\046\024\050\055\263\064\254\065\260\066" +
    "\261\001\002\000\036\014\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\051\uffc6\052\uffc6\056\uffb0\001\002\000\004\056\270" +
    "\001\002\000\036\014\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\051\uffc3\052\uffc3\056\uffad\001\002\000\036\014\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\051\uffc4\052\uffc4\056\uffae\001" +
    "\002\000\036\014\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\051" +
    "\uffb4\052\uffb4\056\uffab\001\002\000\036\014\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\051\uffc5\052\uffc5\056\uffaf\001\002" +
    "\000\034\014\266\022\061\023\073\024\063\025\071\036" +
    "\062\037\065\040\064\041\072\042\074\043\066\051\060" +
    "\052\075\001\002\000\024\004\052\005\047\014\054\022" +
    "\046\024\050\055\056\064\045\065\051\066\053\001\002" +
    "\000\036\014\070\022\061\023\073\024\063\025\071\036" +
    "\062\037\065\040\064\041\072\042\074\043\066\051\060" +
    "\052\075\056\265\001\002\000\036\014\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\043\uffb5\051\uffb5\052\uffb5\056\uffaa\001\002\000" +
    "\024\004\052\005\047\014\054\022\046\024\050\055\056" +
    "\064\045\065\051\066\053\001\002\000\036\014\uffc2\022" +
    "\uffc2\023\073\024\063\025\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\051\uffc2\052\uffc2\056\uffac\001" +
    "\002\000\004\060\271\001\002\000\050\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\044\uffe2\054\uffe2\065\uffe2\001\002\000\004\002" +
    "\ufffe\001\002\000\024\004\052\005\047\014\054\022\046" +
    "\024\050\055\056\064\045\065\051\066\053\001\002\000" +
    "\036\014\070\022\061\023\073\024\063\025\071\036\062" +
    "\037\065\040\064\041\072\042\074\043\066\051\060\052" +
    "\075\056\275\001\002\000\004\053\276\001\002\000\042" +
    "\003\032\006\041\007\024\010\020\011\042\012\037\013" +
    "\031\016\036\027\015\030\023\031\014\033\033\034\026" +
    "\035\040\044\034\065\013\001\002\000\042\006\041\007" +
    "\024\010\020\011\042\012\037\013\031\016\036\027\015" +
    "\030\023\031\014\033\033\034\026\035\040\044\034\054" +
    "\300\065\013\001\002\000\050\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\044\uffe4\054\uffe4\065\uffe4\001\002\000\006\026\302\060" +
    "\303\001\002\000\024\004\052\005\047\014\054\022\046" +
    "\024\050\055\056\064\045\065\051\066\053\001\002\000" +
    "\050\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\044\uffd0\054\uffd0\065\uffd0" +
    "\001\002\000\036\014\070\022\061\023\073\024\063\025" +
    "\071\036\062\037\065\040\064\041\072\042\074\043\066" +
    "\051\060\052\075\060\305\001\002\000\050\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\044\uffcb\054\uffcb\065\uffcb\001\002\000\006" +
    "\026\307\060\310\001\002\000\024\004\052\005\047\014" +
    "\054\022\046\024\050\055\056\064\045\065\051\066\053" +
    "\001\002\000\050\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\016\uffce\017\uffce\020\uffce\021\uffce\027\uffce" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce\044\uffce\054" +
    "\uffce\065\uffce\001\002\000\036\014\070\022\061\023\073" +
    "\024\063\025\071\036\062\037\065\040\064\041\072\042" +
    "\074\043\066\051\060\052\075\060\312\001\002\000\050" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\044\uffc9\054\uffc9\065\uffc9\001" +
    "\002\000\004\006\314\001\002\000\004\065\315\001\002" +
    "\000\004\026\316\001\002\000\004\066\317\001\002\000" +
    "\004\060\320\001\002\000\004\065\321\001\002\000\016" +
    "\025\153\036\152\037\147\040\151\041\146\042\150\001" +
    "\002\000\004\066\323\001\002\000\004\060\324\001\002" +
    "\000\004\065\325\001\002\000\004\014\326\001\002\000" +
    "\004\014\327\001\002\000\004\056\330\001\002\000\004" +
    "\053\331\001\002\000\042\003\032\006\041\007\024\010" +
    "\020\011\042\012\037\013\031\016\036\027\015\030\023" +
    "\031\014\033\033\034\026\035\040\044\034\065\013\001" +
    "\002\000\042\006\041\007\024\010\020\011\042\012\037" +
    "\013\031\016\036\027\015\030\023\031\014\033\033\034" +
    "\026\035\040\044\034\054\333\065\013\001\002\000\050" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\027\uffda\030\uffda\031\uffda" +
    "\033\uffda\034\uffda\035\uffda\044\uffda\054\uffda\065\uffda\001" +
    "\002\000\006\026\335\060\336\001\002\000\024\004\052" +
    "\005\047\014\054\022\046\024\050\055\056\064\045\065" +
    "\051\066\053\001\002\000\050\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\044\uffcf\054\uffcf\065\uffcf\001\002\000\036\014\070\022" +
    "\061\023\073\024\063\025\071\036\062\037\065\040\064" +
    "\041\072\042\074\043\066\051\060\052\075\060\340\001" +
    "\002\000\050\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\016\uffca\017\uffca\020\uffca\021\uffca\027\uffca\030" +
    "\uffca\031\uffca\033\uffca\034\uffca\035\uffca\044\uffca\054\uffca" +
    "\065\uffca\001\002\000\006\026\342\060\343\001\002\000" +
    "\024\004\052\005\047\014\054\022\046\024\050\055\056" +
    "\064\045\065\051\066\053\001\002\000\050\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\044\uffcd\054\uffcd\065\uffcd\001\002\000\036" +
    "\014\070\022\061\023\073\024\063\025\071\036\062\037" +
    "\065\040\064\041\072\042\074\043\066\051\060\052\075" +
    "\060\345\001\002\000\050\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\044" +
    "\uffc8\054\uffc8\065\uffc8\001\002\000\024\004\052\005\047" +
    "\014\054\022\046\024\050\055\056\064\045\065\051\066" +
    "\053\001\002\000\036\014\070\022\061\023\073\024\063" +
    "\025\071\036\062\037\065\040\064\041\072\042\074\043" +
    "\066\051\060\052\075\060\350\001\002\000\050\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\044\uffc7\054\uffc7\065\uffc7\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\010\002\005\003\004\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\026\007\027\012\020\014\021\020\042\021\034\022\015" +
    "\023\016\025\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\123\012\117\014\121\020\125\021" +
    "\124\022\115\023\116\025\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\056\001" +
    "\001\000\002\001\001\000\004\010\111\001\001\000\004" +
    "\010\110\001\001\000\004\010\107\001\001\000\004\010" +
    "\106\001\001\000\004\010\105\001\001\000\004\010\104" +
    "\001\001\000\004\010\103\001\001\000\002\001\001\000" +
    "\004\010\102\001\001\000\004\010\101\001\001\000\004" +
    "\010\100\001\001\000\004\010\077\001\001\000\004\010" +
    "\076\001\001\000\004\010\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\114\007\027\012\020\014\021\020\042\021" +
    "\034\022\015\023\016\025\024\001\001\000\022\007\123" +
    "\012\117\014\121\020\125\021\124\022\115\023\116\025" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\134" +
    "\007\027\012\020\014\021\020\042\021\034\022\015\023" +
    "\016\025\024\001\001\000\022\007\123\012\117\014\121" +
    "\020\125\021\124\022\115\023\116\025\122\001\001\000" +
    "\002\001\001\000\024\005\137\007\027\012\020\014\021" +
    "\020\042\021\034\022\015\023\016\025\024\001\001\000" +
    "\022\007\123\012\117\014\121\020\125\021\124\022\115" +
    "\023\116\025\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\163\016\165\001\001\000\002\001\001\000" +
    "\004\016\174\001\001\000\004\010\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\170\007\027\012" +
    "\020\014\021\020\042\021\034\022\015\023\016\025\024" +
    "\001\001\000\022\007\123\012\117\014\121\020\125\021" +
    "\124\022\115\023\116\025\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\176\007\027\012\020\014\021\020\042\021\034" +
    "\022\015\023\016\025\024\001\001\000\022\007\123\012" +
    "\117\014\121\020\125\021\124\022\115\023\116\025\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\205\033\204\001\001" +
    "\000\002\001\001\000\004\033\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\250\007\027\012\020\014\021\020\042" +
    "\021\034\022\015\023\016\025\024\001\001\000\022\007" +
    "\123\012\117\014\121\020\125\021\124\022\115\023\116" +
    "\025\122\001\001\000\002\001\001\000\006\010\261\024" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\005\276\007\027\012\020\014\021" +
    "\020\042\021\034\022\015\023\016\025\024\001\001\000" +
    "\022\007\123\012\117\014\121\020\125\021\124\022\115" +
    "\023\116\025\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\331\007" +
    "\027\012\020\014\021\020\042\021\034\022\015\023\016" +
    "\025\024\001\001\000\022\007\123\012\117\014\121\020" +
    "\125\021\124\022\115\023\116\025\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 
    Acciones acciones = new Acciones();
    FuncionesGlobales funcionesGlobales = new FuncionesGlobales();

    public void llenarAccion(Acciones gestor){
         acciones = gestor ;
    }


    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ini 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= VOIDD PARENA PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("def main:\n"+a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenido ::= variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenido ::= contenido variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenido ::= ifs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenido ::= contenido ifs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenido ::= imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenido ::= contenido imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenido ::= sswitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenido ::= contenido sswitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido ::= sfor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenido ::= contenido sfor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenido ::= swhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contenido ::= contenido swhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contenido ::= sdowhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contenido ::= contenido sdowhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contenido ::= vglobal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contenido ::= contenido vglobal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contenido ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vglobal ::= GLOBAL PARENA PARENC LLAVEA defglob LLAVEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vglobal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defglob ::= contglobal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defglob",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defglob ::= defglob contglobal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defglob",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contglobal ::= STRINGG IDD IGUALSIMPLE CADENA PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 funcionesGlobales.agregarVariable(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contglobal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contglobal ::= DOUBLEE IDD IGUALSIMPLE NUMEROS PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 funcionesGlobales.agregarVariable(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contglobal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contglobal ::= STRINGG IDD IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                                                                                                        simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                                                                                         if (simboloJson != null){ funcionesGlobales.agregarVariable(a, simboloJson);}
                                                                                                                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contglobal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contglobal ::= DOUBLEE IDD IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                                                                                                        simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                                                                                         if (simboloJson != null){ funcionesGlobales.agregarVariable(a, simboloJson);} 
                                                                                                                                                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contglobal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ifs ::= IFF PARENA expresion PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=("\tif "+a+":\n\t"+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ifs ::= ELSEIF PARENA expresion PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=("\telif "+a+":\n\t"+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ifs ::= ELSEE LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=("\telse:\n\t"+a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // imprimir ::= PRINT PARENA escribir PARENC PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=( "\tprint(" +a+ ")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sswitch ::= SWITCHH PARENA expresion PARENC LLAVEA case LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=("\tdef switch(case," + a+"):\n       \tswitch={\n"+b+"\n\t    }");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sswitch",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // case ::= ocase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=("\t"+a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // case ::= case ocase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\t"+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ocase ::= CASEE expresion DPUNTOS contenido BREAKK PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=("\t\t"+a+":"+b+",");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ocase",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ocase ::= CASEE expresion DPUNTOS contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=("\t\t"+a+": "+b+",");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ocase",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ocase ::= DEFAULTT DPUNTOS contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=("\t\t"+"4:"+a+",");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ocase",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ocase ::= DEFAULTT DPUNTOS contenido BREAKK PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=("\t\t"+"4:"+a+",");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ocase",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sfor ::= FORR PARENA INTT IDD IGUALSIMPLE NUMEROS PUNTOCOMA IDD relacionales NUMEROS PUNTOCOMA IDD MAS MAS PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t for "+a+" in range("+(Integer.parseInt(b)+1)+","+c+"){\n\t"+d+"\t}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sfor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // swhile ::= WHILEE PARENA expresion PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\twhile " +a+" :\n\t"+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("swhile",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sdowhile ::= DOO LLAVEA contenido LLAVEC WHILEE PARENA IDD relacionales NUMEROS PARENC PUNTOCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=("\twhile True:\n\t" +c+"\t\t"+a+" = "+a+" + 1\n\t"+"\tif ("+a+" "+b+" "+d+"):\n\t\t break");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sdowhile",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relacionales ::= MAYOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relacionales ::= MENOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relacionales ::= MAYIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relacionales ::= MENIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relacionales ::= IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relacionales ::= DISTINTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable ::= INTT IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable ::= DOUBLEE IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable ::= CHARR IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable ::= BOOLL IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable ::= STRINGG IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable ::= INTT IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable ::= DOUBLEE IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable ::= CHARR IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable ::= BOOLL IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable ::= STRINGG IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable ::= IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= NUMEROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= VERDAD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= FALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion MULTI expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion DIVISION expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MAYIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MENIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion ANDD expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion ORR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion NOT expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= PARENA expresion PARENC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=b+a+c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= IDD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= MULTI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // escribir ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // escribir ::= NUMEROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // escribir ::= VERDAD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // escribir ::= FALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // escribir ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // escribir ::= IDD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // escribir ::= PARENA expresion PARENC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=b+a+c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
