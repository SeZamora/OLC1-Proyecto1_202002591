
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import DatosJson.Acciones;
import VariablesGlobales.FuncionesGlobales;
import java.util.ArrayList;
import Errores.Excepcion;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\010\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\025\010\000\002\031\003\000\002\031\004\000\002\032" +
    "\007\000\002\032\007\000\002\032\016\000\002\032\016" +
    "\000\002\026\010\000\002\035\010\000\002\033\003\000" +
    "\002\033\004\000\002\034\007\000\002\034\007\000\002" +
    "\034\016\000\002\034\013\000\002\034\013\000\002\034" +
    "\007\000\002\034\007\000\002\034\016\000\002\034\007" +
    "\000\002\034\007\000\002\034\016\000\002\036\003\000" +
    "\002\036\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\013\000\002\037\003\000\002\037\003\000\002\037" +
    "\012\000\002\040\003\000\002\040\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\013\000\002\041\003\000" +
    "\002\041\003\000\002\041\012\000\002\012\011\000\002" +
    "\012\011\000\002\012\006\000\002\023\007\000\002\014" +
    "\011\000\002\015\003\000\002\015\004\000\002\016\010" +
    "\000\002\016\006\000\002\016\005\000\002\016\007\000" +
    "\002\020\024\000\002\021\011\000\002\022\015\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\006\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\004\032\007\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\002\u0174\001\002" +
    "\000\004\057\010\001\002\000\004\060\011\001\002\000" +
    "\004\055\012\001\002\000\046\003\037\006\045\007\027" +
    "\010\021\011\047\012\043\013\036\016\042\027\016\030" +
    "\025\031\014\033\034\034\031\035\044\044\040\045\026" +
    "\046\032\065\013\001\002\000\004\026\u0171\001\002\000" +
    "\004\065\u016c\001\002\000\054\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\056\uffeb\065\uffeb\001\002\000" +
    "\004\065\u0167\001\002\000\054\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\056\ufff1\065\ufff1\001\002\000" +
    "\054\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\033\ufff9\034\ufff9\035\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\056\ufff9\065\ufff9\001\002\000\004\057\u0156\001\002\000" +
    "\054\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\027\uffed\030\uffed\031" +
    "\uffed\033\uffed\034\uffed\035\uffed\044\uffed\045\uffed\046\uffed" +
    "\056\uffed\065\uffed\001\002\000\054\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\056\ufffb\065\ufffb\001\002" +
    "\000\054\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\033\ufff7\034\ufff7\035\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\056\ufff7\065\ufff7\001\002\000\004\065\u0151\001\002" +
    "\000\004\057\u014c\001\002\000\004\065\u0147\001\002\000" +
    "\054\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\027\uffef\030\uffef\031" +
    "\uffef\033\uffef\034\uffef\035\uffef\044\uffef\045\uffef\046\uffef" +
    "\056\uffef\065\uffef\001\002\000\004\057\u0141\001\002\000" +
    "\004\057\335\001\002\000\046\006\045\007\027\010\021" +
    "\011\047\012\043\013\036\016\042\027\016\030\025\031" +
    "\014\033\034\034\031\035\044\044\040\045\026\046\032" +
    "\056\334\065\013\001\002\000\004\057\326\001\002\000" +
    "\054\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\056\ufffd\065\ufffd\001\002\000\004\057\254\001\002\000" +
    "\054\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\056\uffe9\065\uffe9\001\002\000\004\057\211\001\002\000" +
    "\054\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\056\ufff3\065\ufff3\001\002\000\004\057\166\001\002\000" +
    "\004\055\146\001\002\000\004\055\143\001\002\000\004" +
    "\065\136\001\002\000\054\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\056\ufff5\065\ufff5\001\002\000\004" +
    "\057\050\001\002\000\026\004\054\005\052\014\060\022" +
    "\053\023\063\024\055\057\062\064\051\065\056\066\057" +
    "\001\002\000\042\014\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3" +
    "\053\uffa3\054\uffa3\060\uffa3\061\uffa3\062\uffa3\001\002\000" +
    "\042\014\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\053\uffa0\054" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\001\002\000\042\014\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\025\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\053\uff8f\054\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\001\002\000\042\014\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\053\uffa1\054\uffa1\060\uffa1\061\uffa1\062" +
    "\uffa1\001\002\000\042\014\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\053\uff8e\054\uff8e\060\uff8e\061\uff8e\062\uff8e\001\002" +
    "\000\042\014\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\053\uff9f" +
    "\054\uff9f\060\uff9f\061\uff9f\062\uff9f\001\002\000\042\014" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\053\uffa2\054\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\001\002\000\042\014\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\036\uff90\037\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\053\uff90\054\uff90\060\uff90\061\uff90" +
    "\062\uff90\001\002\000\036\014\075\022\066\023\100\024" +
    "\070\025\076\036\067\037\073\040\071\041\077\042\101" +
    "\043\072\053\065\054\102\060\120\001\002\000\026\004" +
    "\054\005\052\014\060\022\053\023\063\024\055\057\062" +
    "\064\051\065\056\066\057\001\002\000\042\014\uff8d\022" +
    "\uff8d\023\uff8d\024\uff8d\025\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\053\uff8d\054\uff8d\060\uff8d\061" +
    "\uff8d\062\uff8d\001\002\000\036\014\075\022\066\023\100" +
    "\024\070\025\076\036\067\037\073\040\071\041\077\042" +
    "\101\043\072\053\065\054\102\060\074\001\002\000\026" +
    "\004\054\005\052\014\060\022\053\023\063\024\055\057" +
    "\062\064\051\065\056\066\057\001\002\000\026\004\054" +
    "\005\052\014\060\022\053\023\063\024\055\057\062\064" +
    "\051\065\056\066\057\001\002\000\026\004\054\005\052" +
    "\014\060\022\053\023\063\024\055\057\062\064\051\065" +
    "\056\066\057\001\002\000\026\004\054\005\052\014\060" +
    "\022\053\023\063\024\055\057\062\064\051\065\056\066" +
    "\057\001\002\000\026\004\054\005\052\014\060\022\053" +
    "\023\063\024\055\057\062\064\051\065\056\066\057\001" +
    "\002\000\026\004\054\005\052\014\060\022\053\023\063" +
    "\024\055\057\062\064\051\065\056\066\057\001\002\000" +
    "\026\004\054\005\052\014\060\022\053\023\063\024\055" +
    "\057\062\064\051\065\056\066\057\001\002\000\042\014" +
    "\uff91\022\uff91\023\uff91\024\uff91\025\uff91\036\uff91\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\053\uff91\054\uff91\060" +
    "\uff91\061\uff91\062\uff91\001\002\000\026\004\054\005\052" +
    "\014\060\022\053\023\063\024\055\057\062\064\051\065" +
    "\056\066\057\001\002\000\026\004\054\005\052\014\060" +
    "\022\053\023\063\024\055\057\062\064\051\065\056\066" +
    "\057\001\002\000\026\004\054\005\052\014\060\022\053" +
    "\023\063\024\055\057\062\064\051\065\056\066\057\001" +
    "\002\000\026\004\054\005\052\014\060\022\053\023\063" +
    "\024\055\057\062\064\051\065\056\066\057\001\002\000" +
    "\026\004\054\005\052\014\060\022\053\023\063\024\055" +
    "\057\062\064\051\065\056\066\057\001\002\000\026\004" +
    "\054\005\052\014\060\022\053\023\063\024\055\057\062" +
    "\064\051\065\056\066\057\001\002\000\042\014\075\022" +
    "\066\023\100\024\070\025\076\036\067\037\073\040\071" +
    "\041\077\042\101\043\uff95\053\uff95\054\uff95\060\uff95\061" +
    "\uff95\062\uff95\001\002\000\042\014\075\022\066\023\100" +
    "\024\070\025\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\053\uff94\054\uff94\060\uff94\061\uff94\062\uff94" +
    "\001\002\000\042\014\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\053\uff9b\054\uff9b\060\uff9b\061\uff9b\062\uff9b\001\002\000" +
    "\042\014\075\022\066\023\100\024\070\025\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\053\uff98\054" +
    "\uff98\060\uff98\061\uff98\062\uff98\001\002\000\042\014\075" +
    "\022\066\023\100\024\070\025\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\053\uff9a\054\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\001\002\000\042\014\uff9e\022\uff9e\023" +
    "\100\024\070\025\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\053\uff9e\054\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\001\002\000\042\014\075\022\066\023\100\024\070" +
    "\025\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\053\uff97\054\uff97\060\uff97\061\uff97\062\uff97\001\002" +
    "\000\042\014\075\022\066\023\100\024\070\025\076\036" +
    "\067\037\073\040\071\041\077\042\101\043\uff93\053\uff93" +
    "\054\102\060\uff93\061\uff93\062\uff93\001\002\000\042\014" +
    "\075\022\066\023\100\024\070\025\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\053\uff96\054\uff96\060" +
    "\uff96\061\uff96\062\uff96\001\002\000\042\014\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\053\uff9c\054\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\001\002\000\042\014\075\022\066\023\100\024" +
    "\070\025\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\053\uff99\054\uff99\060\uff99\061\uff99\062\uff99\001" +
    "\002\000\042\014\uff9d\022\uff9d\023\100\024\070\025\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\053" +
    "\uff9d\054\uff9d\060\uff9d\061\uff9d\062\uff9d\001\002\000\042" +
    "\014\075\022\066\023\100\024\070\025\076\036\067\037" +
    "\073\040\071\041\077\042\101\043\072\053\uff92\054\102" +
    "\060\uff92\061\uff92\062\uff92\001\002\000\004\055\121\001" +
    "\002\000\046\003\037\006\045\007\027\010\021\011\047" +
    "\012\043\013\036\016\042\027\016\030\025\031\014\033" +
    "\034\034\031\035\044\044\040\045\026\046\032\065\013" +
    "\001\002\000\046\006\045\007\027\010\021\011\047\012" +
    "\043\013\036\016\042\027\016\030\025\031\014\033\034" +
    "\034\031\035\044\044\040\045\026\046\032\056\130\065" +
    "\013\001\002\000\054\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\016\uffea\017\uffea\020\uffea\021\uffea\027" +
    "\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea\044\uffea" +
    "\045\uffea\046\uffea\056\uffea\065\uffea\001\002\000\054\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\027\ufff0\030\ufff0\031\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\044\ufff0\045\ufff0\046\ufff0\056\ufff0" +
    "\065\ufff0\001\002\000\054\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\056\ufff8\065\ufff8\001\002\000\054" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\027\uffec\030\uffec\031\uffec" +
    "\033\uffec\034\uffec\035\uffec\044\uffec\045\uffec\046\uffec\056" +
    "\uffec\065\uffec\001\002\000\054\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\056\ufffa\065\ufffa\001\002\000" +
    "\054\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\056\uffb6\065\uffb6\001\002\000\054\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\027\ufff6\030\ufff6\031\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\056\ufff6\065\ufff6\001\002" +
    "\000\054\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\027\uffee\030\uffee" +
    "\031\uffee\033\uffee\034\uffee\035\uffee\044\uffee\045\uffee\046" +
    "\uffee\056\uffee\065\uffee\001\002\000\054\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\044\ufffc\045\ufffc\046\ufffc\056\ufffc\065\ufffc\001" +
    "\002\000\054\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\056\ufff2\065\ufff2\001\002\000\054\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\044\ufff4\045\ufff4\046\ufff4\056\ufff4\065\ufff4" +
    "\001\002\000\006\026\137\062\140\001\002\000\026\004" +
    "\054\005\052\014\060\022\053\023\063\024\055\057\062" +
    "\064\051\065\056\066\057\001\002\000\054\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034" +
    "\uffae\035\uffae\044\uffae\045\uffae\046\uffae\056\uffae\065\uffae" +
    "\001\002\000\036\014\075\022\066\023\100\024\070\025" +
    "\076\036\067\037\073\040\071\041\077\042\101\043\072" +
    "\053\065\054\102\062\142\001\002\000\054\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\044\uffa9\045\uffa9\046\uffa9\056\uffa9\065\uffa9" +
    "\001\002\000\046\003\037\006\045\007\027\010\021\011" +
    "\047\012\043\013\036\016\042\027\016\030\025\031\014" +
    "\033\034\034\031\035\044\044\040\045\026\046\032\065" +
    "\013\001\002\000\046\006\045\007\027\010\021\011\047" +
    "\012\043\013\036\016\042\027\016\030\025\031\014\033" +
    "\034\034\031\035\044\044\040\045\026\046\032\056\145" +
    "\065\013\001\002\000\054\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\056\uffc0\065\uffc0\001\002\000\046" +
    "\003\037\006\045\007\027\010\021\011\047\012\043\013" +
    "\036\016\042\027\016\030\025\031\014\033\034\034\031" +
    "\035\044\044\040\045\026\046\032\065\013\001\002\000" +
    "\046\006\045\007\027\010\021\011\047\012\043\013\036" +
    "\016\042\027\016\030\025\031\014\033\034\034\031\035" +
    "\044\044\040\045\026\046\032\056\150\065\013\001\002" +
    "\000\004\011\151\001\002\000\004\057\152\001\002\000" +
    "\004\065\153\001\002\000\016\025\162\036\161\037\156" +
    "\040\157\041\155\042\160\001\002\000\004\066\163\001" +
    "\002\000\004\066\uffb0\001\002\000\004\066\uffb2\001\002" +
    "\000\004\066\uffb1\001\002\000\004\066\uffaf\001\002\000" +
    "\004\066\uffb3\001\002\000\004\066\uffb4\001\002\000\004" +
    "\060\164\001\002\000\004\062\165\001\002\000\054\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\027\uffb5\030\uffb5\031\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\044\uffb5\045\uffb5\046\uffb5\056\uffb5" +
    "\065\uffb5\001\002\000\026\004\054\005\052\014\060\022" +
    "\053\023\063\024\055\057\062\064\051\065\056\066\057" +
    "\001\002\000\036\014\075\022\066\023\100\024\070\025" +
    "\076\036\067\037\073\040\071\041\077\042\101\043\072" +
    "\053\065\054\102\060\170\001\002\000\004\055\171\001" +
    "\002\000\006\017\174\021\172\001\002\000\004\061\205" +
    "\001\002\000\010\017\174\021\172\056\203\001\002\000" +
    "\026\004\054\005\052\014\060\022\053\023\063\024\055" +
    "\057\062\064\051\065\056\066\057\001\002\000\010\017" +
    "\uffbd\021\uffbd\056\uffbd\001\002\000\036\014\075\022\066" +
    "\023\100\024\070\025\076\036\067\037\073\040\071\041" +
    "\077\042\101\043\072\053\065\054\102\061\177\001\002" +
    "\000\046\003\037\006\045\007\027\010\021\011\047\012" +
    "\043\013\036\016\042\027\016\030\025\031\014\033\034" +
    "\034\031\035\044\044\040\045\026\046\032\065\013\001" +
    "\002\000\054\006\045\007\027\010\021\011\047\012\043" +
    "\013\036\016\042\017\uffba\020\201\021\uffba\027\016\030" +
    "\025\031\014\033\034\034\031\035\044\044\040\045\026" +
    "\046\032\056\uffba\065\013\001\002\000\004\062\202\001" +
    "\002\000\010\017\uffbb\021\uffbb\056\uffbb\001\002\000\054" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\044\uffbe\045\uffbe\046\uffbe\056" +
    "\uffbe\065\uffbe\001\002\000\010\017\uffbc\021\uffbc\056\uffbc" +
    "\001\002\000\046\003\037\006\045\007\027\010\021\011" +
    "\047\012\043\013\036\016\042\027\016\030\025\031\014" +
    "\033\034\034\031\035\044\044\040\045\026\046\032\065" +
    "\013\001\002\000\054\006\045\007\027\010\021\011\047" +
    "\012\043\013\036\016\042\017\uffb9\020\207\021\uffb9\027" +
    "\016\030\025\031\014\033\034\034\031\035\044\044\040" +
    "\045\026\046\032\056\uffb9\065\013\001\002\000\004\062" +
    "\210\001\002\000\010\017\uffb8\021\uffb8\056\uffb8\001\002" +
    "\000\004\060\212\001\002\000\004\055\213\001\002\000" +
    "\006\007\216\031\217\001\002\000\010\007\uffe7\031\uffe7" +
    "\056\uffe7\001\002\000\010\007\216\031\217\056\252\001" +
    "\002\000\004\065\235\001\002\000\004\065\220\001\002" +
    "\000\004\026\221\001\002\000\006\047\222\064\223\001" +
    "\002\000\004\055\225\001\002\000\004\062\224\001\002" +
    "\000\010\007\uffe5\031\uffe5\056\uffe5\001\002\000\004\050" +
    "\226\001\002\000\004\063\227\001\002\000\004\064\230" +
    "\001\002\000\004\063\231\001\002\000\004\064\232\001" +
    "\002\000\004\056\233\001\002\000\004\062\234\001\002" +
    "\000\010\007\uffe3\031\uffe3\056\uffe3\001\002\000\004\026" +
    "\236\001\002\000\006\047\237\066\240\001\002\000\004" +
    "\055\242\001\002\000\004\062\241\001\002\000\010\007" +
    "\uffe4\031\uffe4\056\uffe4\001\002\000\004\050\243\001\002" +
    "\000\004\063\244\001\002\000\004\064\245\001\002\000" +
    "\004\063\246\001\002\000\004\064\247\001\002\000\004" +
    "\056\250\001\002\000\004\062\251\001\002\000\010\007" +
    "\uffe2\031\uffe2\056\uffe2\001\002\000\054\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\044\uffe8\045\uffe8\046\uffe8\056\uffe8\065\uffe8\001" +
    "\002\000\010\007\uffe6\031\uffe6\056\uffe6\001\002\000\026" +
    "\004\263\005\257\014\265\022\260\023\267\024\262\057" +
    "\266\064\255\065\261\066\264\001\002\000\036\014\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\053\uff8c\054\uff8c\060\uff8c" +
    "\001\002\000\036\014\301\022\272\023\304\024\274\025" +
    "\302\036\273\037\277\040\275\041\303\042\305\043\276" +
    "\053\271\054\306\060\324\001\002\000\036\014\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\053\uff89\054\uff89\060\uff89\001" +
    "\002\000\036\014\uff78\022\uff78\023\uff78\024\uff78\025\uff78" +
    "\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\053" +
    "\uff78\054\uff78\060\uff78\001\002\000\036\014\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\053\uff88\054\uff88\060\uff88\001\002" +
    "\000\036\014\uff77\022\uff77\023\uff77\024\uff77\025\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\053\uff77" +
    "\054\uff77\060\uff77\001\002\000\036\014\uff8a\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\053\uff8a\054\uff8a\060\uff8a\001\002\000" +
    "\036\014\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\053\uff8b\054" +
    "\uff8b\060\uff8b\001\002\000\036\014\uff79\022\uff79\023\uff79" +
    "\024\uff79\025\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042" +
    "\uff79\043\uff79\053\uff79\054\uff79\060\uff79\001\002\000\026" +
    "\004\263\005\257\014\265\022\260\023\267\024\262\057" +
    "\266\064\255\065\261\066\264\001\002\000\036\014\uff76" +
    "\022\uff76\023\uff76\024\uff76\025\uff76\036\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\uff76\053\uff76\054\uff76\060\uff76" +
    "\001\002\000\036\014\301\022\272\023\304\024\274\025" +
    "\302\036\273\037\277\040\275\041\303\042\305\043\276" +
    "\053\271\054\306\060\300\001\002\000\026\004\263\005" +
    "\257\014\265\022\260\023\267\024\262\057\266\064\255" +
    "\065\261\066\264\001\002\000\026\004\263\005\257\014" +
    "\265\022\260\023\267\024\262\057\266\064\255\065\261" +
    "\066\264\001\002\000\026\004\263\005\257\014\265\022" +
    "\260\023\267\024\262\057\266\064\255\065\261\066\264" +
    "\001\002\000\026\004\263\005\257\014\265\022\260\023" +
    "\267\024\262\057\266\064\255\065\261\066\264\001\002" +
    "\000\026\004\263\005\257\014\265\022\260\023\267\024" +
    "\262\057\266\064\255\065\261\066\264\001\002\000\026" +
    "\004\263\005\257\014\265\022\260\023\267\024\262\057" +
    "\266\064\255\065\261\066\264\001\002\000\026\004\263" +
    "\005\257\014\265\022\260\023\267\024\262\057\266\064" +
    "\255\065\261\066\264\001\002\000\036\014\uff7a\022\uff7a" +
    "\023\uff7a\024\uff7a\025\uff7a\036\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\042\uff7a\043\uff7a\053\uff7a\054\uff7a\060\uff7a\001\002" +
    "\000\026\004\263\005\257\014\265\022\260\023\267\024" +
    "\262\057\266\064\255\065\261\066\264\001\002\000\026" +
    "\004\263\005\257\014\265\022\260\023\267\024\262\057" +
    "\266\064\255\065\261\066\264\001\002\000\026\004\263" +
    "\005\257\014\265\022\260\023\267\024\262\057\266\064" +
    "\255\065\261\066\264\001\002\000\026\004\263\005\257" +
    "\014\265\022\260\023\267\024\262\057\266\064\255\065" +
    "\261\066\264\001\002\000\026\004\263\005\257\014\265" +
    "\022\260\023\267\024\262\057\266\064\255\065\261\066" +
    "\264\001\002\000\026\004\263\005\257\014\265\022\260" +
    "\023\267\024\262\057\266\064\255\065\261\066\264\001" +
    "\002\000\036\014\301\022\272\023\304\024\274\025\302" +
    "\036\273\037\277\040\275\041\303\042\305\043\uff7e\053" +
    "\uff7e\054\uff7e\060\uff7e\001\002\000\036\014\301\022\272" +
    "\023\304\024\274\025\uff7d\036\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\053\uff7d\054\uff7d\060\uff7d\001\002" +
    "\000\036\014\uff84\022\uff84\023\uff84\024\uff84\025\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\053\uff84" +
    "\054\uff84\060\uff84\001\002\000\036\014\301\022\272\023" +
    "\304\024\274\025\uff81\036\uff81\037\uff81\040\uff81\041\uff81" +
    "\042\uff81\043\uff81\053\uff81\054\uff81\060\uff81\001\002\000" +
    "\036\014\301\022\272\023\304\024\274\025\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\053\uff83\054" +
    "\uff83\060\uff83\001\002\000\036\014\uff87\022\uff87\023\304" +
    "\024\274\025\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\053\uff87\054\uff87\060\uff87\001\002\000\036" +
    "\014\301\022\272\023\304\024\274\025\uff80\036\uff80\037" +
    "\uff80\040\uff80\041\uff80\042\uff80\043\uff80\053\uff80\054\uff80" +
    "\060\uff80\001\002\000\036\014\301\022\272\023\304\024" +
    "\274\025\302\036\273\037\277\040\275\041\303\042\305" +
    "\043\uff7c\053\uff7c\054\306\060\uff7c\001\002\000\036\014" +
    "\301\022\272\023\304\024\274\025\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\053\uff7f\054\uff7f\060" +
    "\uff7f\001\002\000\036\014\uff85\022\uff85\023\uff85\024\uff85" +
    "\025\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043" +
    "\uff85\053\uff85\054\uff85\060\uff85\001\002\000\036\014\301" +
    "\022\272\023\304\024\274\025\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\053\uff82\054\uff82\060\uff82" +
    "\001\002\000\036\014\uff86\022\uff86\023\304\024\274\025" +
    "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86" +
    "\053\uff86\054\uff86\060\uff86\001\002\000\036\014\301\022" +
    "\272\023\304\024\274\025\302\036\273\037\277\040\275" +
    "\041\303\042\305\043\276\053\uff7b\054\306\060\uff7b\001" +
    "\002\000\004\062\325\001\002\000\054\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\044\uffbf\045\uffbf\046\uffbf\056\uffbf\065\uffbf\001" +
    "\002\000\026\004\054\005\052\014\060\022\053\023\063" +
    "\024\055\057\062\064\051\065\056\066\057\001\002\000" +
    "\036\014\075\022\066\023\100\024\070\025\076\036\067" +
    "\037\073\040\071\041\077\042\101\043\072\053\065\054" +
    "\102\060\330\001\002\000\004\055\331\001\002\000\046" +
    "\003\037\006\045\007\027\010\021\011\047\012\043\013" +
    "\036\016\042\027\016\030\025\031\014\033\034\034\031" +
    "\035\044\044\040\045\026\046\032\065\013\001\002\000" +
    "\046\006\045\007\027\010\021\011\047\012\043\013\036" +
    "\016\042\027\016\030\025\031\014\033\034\034\031\035" +
    "\044\044\040\045\026\046\032\056\333\065\013\001\002" +
    "\000\054\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\033\uffc2\034\uffc2\035\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\056\uffc2\065\uffc2\001\002\000\004\002\ufffe\001\002" +
    "\000\004\060\336\001\002\000\004\055\337\001\002\000" +
    "\006\007\342\031\343\001\002\000\010\007\342\031\343" +
    "\056\u013f\001\002\000\010\007\uffdf\031\uffdf\056\uffdf\001" +
    "\002\000\004\051\u0128\001\002\000\012\051\347\067\344" +
    "\072\346\073\345\001\002\000\004\026\u011a\001\002\000" +
    "\004\026\u010c\001\002\000\004\026\376\001\002\000\004" +
    "\052\350\001\002\000\004\070\351\001\002\000\004\026" +
    "\352\001\002\000\004\055\353\001\002\000\010\047\354" +
    "\064\360\065\356\001\002\000\004\055\366\001\002\000" +
    "\012\047\uffd2\056\uffd2\064\uffd2\065\uffd2\001\002\000\014" +
    "\047\uffcc\056\uffcc\063\365\064\uffcc\065\uffcc\001\002\000" +
    "\012\047\354\056\362\064\360\065\356\001\002\000\014" +
    "\047\uffcd\056\uffcd\063\361\064\uffcd\065\uffcd\001\002\000" +
    "\012\047\uffd0\056\uffd0\064\uffd0\065\uffd0\001\002\000\004" +
    "\062\364\001\002\000\012\047\uffd1\056\uffd1\064\uffd1\065" +
    "\uffd1\001\002\000\010\007\uffda\031\uffda\056\uffda\001\002" +
    "\000\012\047\uffcf\056\uffcf\064\uffcf\065\uffcf\001\002\000" +
    "\004\050\367\001\002\000\004\063\370\001\002\000\004" +
    "\064\371\001\002\000\004\063\372\001\002\000\004\064" +
    "\373\001\002\000\004\056\374\001\002\000\014\047\uffcb" +
    "\056\uffcb\063\375\064\uffcb\065\uffcb\001\002\000\012\047" +
    "\uffce\056\uffce\064\uffce\065\uffce\001\002\000\010\047\377" +
    "\064\u0101\065\u0100\001\002\000\004\055\u0104\001\002\000" +
    "\004\062\u0103\001\002\000\004\062\u0102\001\002\000\010" +
    "\007\uffd8\031\uffd8\056\uffd8\001\002\000\010\007\uffd7\031" +
    "\uffd7\056\uffd7\001\002\000\004\050\u0105\001\002\000\004" +
    "\063\u0106\001\002\000\004\064\u0107\001\002\000\004\063" +
    "\u0108\001\002\000\004\064\u0109\001\002\000\004\056\u010a" +
    "\001\002\000\004\062\u010b\001\002\000\010\007\uffd6\031" +
    "\uffd6\056\uffd6\001\002\000\010\047\u010d\064\u010f\065\u010e" +
    "\001\002\000\004\055\u0112\001\002\000\004\062\u0111\001" +
    "\002\000\004\062\u0110\001\002\000\010\007\uffd5\031\uffd5" +
    "\056\uffd5\001\002\000\010\007\uffd4\031\uffd4\056\uffd4\001" +
    "\002\000\004\050\u0113\001\002\000\004\063\u0114\001\002" +
    "\000\004\064\u0115\001\002\000\004\063\u0116\001\002\000" +
    "\004\064\u0117\001\002\000\004\056\u0118\001\002\000\004" +
    "\062\u0119\001\002\000\010\007\uffd3\031\uffd3\056\uffd3\001" +
    "\002\000\010\047\u011b\064\u011d\065\u011c\001\002\000\004" +
    "\055\u0120\001\002\000\004\062\u011f\001\002\000\004\062" +
    "\u011e\001\002\000\010\007\uffdd\031\uffdd\056\uffdd\001\002" +
    "\000\010\007\uffdc\031\uffdc\056\uffdc\001\002\000\004\050" +
    "\u0121\001\002\000\004\063\u0122\001\002\000\004\064\u0123" +
    "\001\002\000\004\063\u0124\001\002\000\004\064\u0125\001" +
    "\002\000\004\056\u0126\001\002\000\004\062\u0127\001\002" +
    "\000\010\007\uffdb\031\uffdb\056\uffdb\001\002\000\004\052" +
    "\u0129\001\002\000\004\071\u012a\001\002\000\004\026\u012b" +
    "\001\002\000\004\055\u012c\001\002\000\010\047\u012e\065" +
    "\u012f\066\u0130\001\002\000\012\047\uffca\056\uffca\065\uffca" +
    "\066\uffca\001\002\000\004\055\u0137\001\002\000\014\047" +
    "\uffc4\056\uffc4\063\u0136\065\uffc4\066\uffc4\001\002\000\014" +
    "\047\uffc5\056\uffc5\063\u0135\065\uffc5\066\uffc5\001\002\000" +
    "\012\047\u012e\056\u0132\065\u012f\066\u0130\001\002\000\004" +
    "\062\u0134\001\002\000\012\047\uffc9\056\uffc9\065\uffc9\066" +
    "\uffc9\001\002\000\010\007\uffd9\031\uffd9\056\uffd9\001\002" +
    "\000\012\047\uffc8\056\uffc8\065\uffc8\066\uffc8\001\002\000" +
    "\012\047\uffc7\056\uffc7\065\uffc7\066\uffc7\001\002\000\004" +
    "\050\u0138\001\002\000\004\063\u0139\001\002\000\004\064" +
    "\u013a\001\002\000\004\063\u013b\001\002\000\004\064\u013c" +
    "\001\002\000\004\056\u013d\001\002\000\014\047\uffc3\056" +
    "\uffc3\063\u013e\065\uffc3\066\uffc3\001\002\000\012\047\uffc6" +
    "\056\uffc6\065\uffc6\066\uffc6\001\002\000\054\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\044\uffe1\045\uffe1\046\uffe1\056\uffe1\065\uffe1" +
    "\001\002\000\010\007\uffde\031\uffde\056\uffde\001\002\000" +
    "\026\004\054\005\052\014\060\022\053\023\063\024\055" +
    "\057\062\064\051\065\056\066\057\001\002\000\036\014" +
    "\075\022\066\023\100\024\070\025\076\036\067\037\073" +
    "\040\071\041\077\042\101\043\072\053\065\054\102\060" +
    "\u0143\001\002\000\004\055\u0144\001\002\000\046\003\037" +
    "\006\045\007\027\010\021\011\047\012\043\013\036\016" +
    "\042\027\016\030\025\031\014\033\034\034\031\035\044" +
    "\044\040\045\026\046\032\065\013\001\002\000\046\006" +
    "\045\007\027\010\021\011\047\012\043\013\036\016\042" +
    "\027\016\030\025\031\014\033\034\034\031\035\044\044" +
    "\040\045\026\046\032\056\u0146\065\013\001\002\000\054" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\044\uffc1\045\uffc1\046\uffc1\056" +
    "\uffc1\065\uffc1\001\002\000\006\026\u0148\062\u0149\001\002" +
    "\000\026\004\054\005\052\014\060\022\053\023\063\024" +
    "\055\057\062\064\051\065\056\066\057\001\002\000\054" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\027\uffad\030\uffad\031\uffad" +
    "\033\uffad\034\uffad\035\uffad\044\uffad\045\uffad\046\uffad\056" +
    "\uffad\065\uffad\001\002\000\036\014\075\022\066\023\100" +
    "\024\070\025\076\036\067\037\073\040\071\041\077\042" +
    "\101\043\072\053\065\054\102\062\u014b\001\002\000\054" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\044\uffa8\045\uffa8\046\uffa8\056" +
    "\uffa8\065\uffa8\001\002\000\004\060\u014d\001\002\000\004" +
    "\055\u014e\001\002\000\006\007\342\031\343\001\002\000" +
    "\010\007\342\031\343\056\u0150\001\002\000\054\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\044\uffe0\045\uffe0\046\uffe0\056\uffe0\065" +
    "\uffe0\001\002\000\006\026\u0152\062\u0153\001\002\000\026" +
    "\004\054\005\052\014\060\022\053\023\063\024\055\057" +
    "\062\064\051\065\056\066\057\001\002\000\054\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\027\uffab\030\uffab\031\uffab\033\uffab" +
    "\034\uffab\035\uffab\044\uffab\045\uffab\046\uffab\056\uffab\065" +
    "\uffab\001\002\000\036\014\075\022\066\023\100\024\070" +
    "\025\076\036\067\037\073\040\071\041\077\042\101\043" +
    "\072\053\065\054\102\062\u0155\001\002\000\054\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\044\uffa6\045\uffa6\046\uffa6\056\uffa6\065" +
    "\uffa6\001\002\000\004\006\u0157\001\002\000\004\065\u0158" +
    "\001\002\000\004\026\u0159\001\002\000\004\066\u015a\001" +
    "\002\000\004\062\u015b\001\002\000\004\065\u015c\001\002" +
    "\000\016\025\162\036\161\037\156\040\157\041\155\042" +
    "\160\001\002\000\004\066\u015e\001\002\000\004\062\u015f" +
    "\001\002\000\004\065\u0160\001\002\000\004\014\u0161\001" +
    "\002\000\004\014\u0162\001\002\000\004\060\u0163\001\002" +
    "\000\004\055\u0164\001\002\000\046\003\037\006\045\007" +
    "\027\010\021\011\047\012\043\013\036\016\042\027\016" +
    "\030\025\031\014\033\034\034\031\035\044\044\040\045" +
    "\026\046\032\065\013\001\002\000\046\006\045\007\027" +
    "\010\021\011\047\012\043\013\036\016\042\027\016\030" +
    "\025\031\014\033\034\034\031\035\044\044\040\045\026" +
    "\046\032\056\u0166\065\013\001\002\000\054\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\044\uffb7\045\uffb7\046\uffb7\056\uffb7\065\uffb7" +
    "\001\002\000\006\026\u0168\062\u0169\001\002\000\026\004" +
    "\054\005\052\014\060\022\053\023\063\024\055\057\062" +
    "\064\051\065\056\066\057\001\002\000\054\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\027\uffac\030\uffac\031\uffac\033\uffac\034" +
    "\uffac\035\uffac\044\uffac\045\uffac\046\uffac\056\uffac\065\uffac" +
    "\001\002\000\036\014\075\022\066\023\100\024\070\025" +
    "\076\036\067\037\073\040\071\041\077\042\101\043\072" +
    "\053\065\054\102\062\u016b\001\002\000\054\006\uffa7\007" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\044\uffa7\045\uffa7\046\uffa7\056\uffa7\065\uffa7" +
    "\001\002\000\006\026\u016d\062\u016e\001\002\000\026\004" +
    "\054\005\052\014\060\022\053\023\063\024\055\057\062" +
    "\064\051\065\056\066\057\001\002\000\054\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\044\uffaa\045\uffaa\046\uffaa\056\uffaa\065\uffaa" +
    "\001\002\000\036\014\075\022\066\023\100\024\070\025" +
    "\076\036\067\037\073\040\071\041\077\042\101\043\072" +
    "\053\065\054\102\062\u0170\001\002\000\054\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\044\uffa5\045\uffa5\046\uffa5\056\uffa5\065\uffa5" +
    "\001\002\000\026\004\054\005\052\014\060\022\053\023" +
    "\063\024\055\057\062\064\051\065\056\066\057\001\002" +
    "\000\036\014\075\022\066\023\100\024\070\025\076\036" +
    "\067\037\073\040\071\041\077\042\101\043\072\053\065" +
    "\054\102\062\u0173\001\002\000\054\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\056\uffa4\065\uffa4\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\010\002\005\003\004\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\032\007\034\012\022\014\023\020\045\021\040\022\016" +
    "\023\017\025\027\026\014\035\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\132" +
    "\012\126\014\130\020\134\021\133\022\123\023\124\025" +
    "\131\026\122\035\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\116\001\001" +
    "\000\004\010\115\001\001\000\004\010\114\001\001\000" +
    "\004\010\113\001\001\000\004\010\112\001\001\000\004" +
    "\010\111\001\001\000\004\010\110\001\001\000\002\001" +
    "\001\000\004\010\107\001\001\000\004\010\106\001\001" +
    "\000\004\010\105\001\001\000\004\010\104\001\001\000" +
    "\004\010\103\001\001\000\004\010\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\121\007\034\012\022\014\023\020" +
    "\045\021\040\022\016\023\017\025\027\026\014\035\021" +
    "\001\001\000\026\007\132\012\126\014\130\020\134\021" +
    "\133\022\123\023\124\025\131\026\122\035\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\143\007\034\012\022\014\023\020\045" +
    "\021\040\022\016\023\017\025\027\026\014\035\021\001" +
    "\001\000\026\007\132\012\126\014\130\020\134\021\133" +
    "\022\123\023\124\025\131\026\122\035\125\001\001\000" +
    "\002\001\001\000\030\005\146\007\034\012\022\014\023" +
    "\020\045\021\040\022\016\023\017\025\027\026\014\035" +
    "\021\001\001\000\026\007\132\012\126\014\130\020\134" +
    "\021\133\022\123\023\124\025\131\026\122\035\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\172\016" +
    "\174\001\001\000\002\001\001\000\004\016\203\001\001" +
    "\000\004\010\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\177\007\034\012\022\014\023\020\045" +
    "\021\040\022\016\023\017\025\027\026\014\035\021\001" +
    "\001\000\026\007\132\012\126\014\130\020\134\021\133" +
    "\022\123\023\124\025\131\026\122\035\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\205\007\034\012\022\014\023\020" +
    "\045\021\040\022\016\023\017\025\027\026\014\035\021" +
    "\001\001\000\026\007\132\012\126\014\130\020\134\021" +
    "\133\022\123\023\124\025\131\026\122\035\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\214\032\213\001\001\000\002" +
    "\001\001\000\004\032\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\322\001\001\000\004\024\321\001" +
    "\001\000\004\024\320\001\001\000\004\024\317\001\001" +
    "\000\004\024\316\001\001\000\004\024\315\001\001\000" +
    "\004\024\314\001\001\000\002\001\001\000\004\024\313" +
    "\001\001\000\004\024\312\001\001\000\004\024\311\001" +
    "\001\000\004\024\310\001\001\000\004\024\307\001\001" +
    "\000\004\024\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\331\007\034\012\022\014\023\020" +
    "\045\021\040\022\016\023\017\025\027\026\014\035\021" +
    "\001\001\000\026\007\132\012\126\014\130\020\134\021" +
    "\133\022\123\023\124\025\131\026\122\035\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\337\034\340\001\001\000\004" +
    "\034\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\356\037\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\u0130\041\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u0132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0141\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\u0144\007\034\012\022\014\023\020\045\021\040\022" +
    "\016\023\017\025\027\026\014\035\021\001\001\000\026" +
    "\007\132\012\126\014\130\020\134\021\133\022\123\023" +
    "\124\025\131\026\122\035\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0149\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\u014e\034\340\001\001\000" +
    "\004\034\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u015c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\u0164\007\034\012\022\014\023\020\045\021\040\022" +
    "\016\023\017\025\027\026\014\035\021\001\001\000\026" +
    "\007\132\012\126\014\130\020\134\021\133\022\123\023" +
    "\124\025\131\026\122\035\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0169\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u016e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String Titulo = "";
    public static String TituloX= "";
    public static String TituloY="";
    public static String Salida="";
    ArrayList<String> ArrayEjex = new ArrayList<String>();
    ArrayList<Double> ArrayValores = new ArrayList<Double>();
    Acciones acciones = new Acciones();
    FuncionesGlobales funcionesGlobales = new FuncionesGlobales();

    public void llenarAccion(Acciones gestor){
         acciones = gestor ;
    }
    
   public String textoSalida(){
        return Salida;
    }


     ///  declarar un arraylist para los errores sintacticos 
    ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left+1), Integer.toString(s.right+1) ));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , Integer.toString(s.left+1), Integer.toString(s.right+1) ));
    }
        public ArrayList<Excepcion> ArrayError(){
                   return erroresSintacticos;
         }

              public void LimpiarSin(){
                  erroresSintacticos.clear();
              }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ini 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= VOIDD PARENA PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("def main:\n"+a); Salida="def main:\n"+a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenido ::= variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenido ::= contenido variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenido ::= ifs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenido ::= contenido ifs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenido ::= imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenido ::= contenido imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenido ::= sswitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenido ::= contenido sswitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido ::= sfor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenido ::= contenido sfor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenido ::= swhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contenido ::= contenido swhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contenido ::= sdowhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contenido ::= contenido sdowhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+""+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contenido ::= vglobal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contenido ::= contenido vglobal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contenido ::= vbarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contenido ::= contenido vbarras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contenido ::= vpie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contenido ::= contenido vpie 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contenido ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vglobal ::= GLOBAL PARENA PARENC LLAVEA defglob LLAVEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vglobal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // defglob ::= contglobal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defglob",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // defglob ::= defglob contglobal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defglob",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contglobal ::= STRINGG IDD IGUALSIMPLE CADENA PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 funcionesGlobales.agregarVariable(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contglobal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contglobal ::= DOUBLEE IDD IGUALSIMPLE NUMEROS PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 funcionesGlobales.agregarVariable(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contglobal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contglobal ::= STRINGG IDD IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                                                                                                        simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                                                                                         if (simboloJson != null){ funcionesGlobales.agregarVariable(a, simboloJson);}
                                                                                                                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contglobal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contglobal ::= DOUBLEE IDD IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                                                                                                        simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                                                                                         if (simboloJson != null){ funcionesGlobales.agregarVariable(a, simboloJson);} 
                                                                                                                                                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contglobal",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vpie ::= PIE PARENA PARENC LLAVEA defbarras LLAVEC 
            {
              Object RESULT =null;
		

                                                                                                 //Ingreso de datos
       DefaultPieDataset dataset = new DefaultPieDataset();
         int tamaño = ArrayEjex.size();
         for (int i = 0; i < tamaño; i++) {
            dataset.setValue(ArrayEjex.get(i), ArrayValores.get(i));
        }
        // Creación de gráfica
        JFreeChart grafica = 
            ChartFactory.createPieChart(Titulo, dataset);
        
                 ArrayValores.clear();
                  ArrayEjex.clear();
        // Mostrar
        ChartFrame frame = new ChartFrame(Titulo, grafica);
        frame.pack();
        frame.setVisible(true);
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vpie",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vbarras ::= BARRAS PARENA PARENC LLAVEA defbarras LLAVEC 
            {
              Object RESULT =null;
		 
                                                                    
                                                                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                                                                    int tamaño = ArrayEjex.size();

                                                                    for (int i = 0; i < tamaño; i++) {
                                                                        dataset.addValue(ArrayValores.get(i), "Valor", ArrayEjex.get(i));
                                                                    }

                                                                    // Creación de gráfica
                                                                    JFreeChart grafica = 
                                                                        ChartFactory.createBarChart(
                                                                            Titulo, //TITULO
                                                                            TituloX, TituloY, 
                                                                            dataset, 
                                                                            PlotOrientation.VERTICAL,
                                                                            true, true, true);

                                                                       ArrayValores.clear();
                                                                       ArrayEjex.clear();
                                                                    // Mostrar
                                                                    ChartFrame frame = new ChartFrame(Titulo,  grafica);
                                                                    frame.pack();
                                                                    frame.setVisible(true);
                                                             
                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vbarras",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // defbarras ::= contbarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defbarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // defbarras ::= defbarras contbarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defbarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contbarras ::= STRINGG TITULO IGUALSIMPLE CADENA PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Titulo = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // contbarras ::= STRINGG TITULO IGUALSIMPLE IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String simboloJson = "";
                                                                                                                            simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                            if (simboloJson != null){ Titulo=simboloJson; } 
                                                                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contbarras ::= STRINGG TITULO IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                              if (simboloJson != null){ Titulo=simboloJson; } 
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contbarras ::= STRINGG CORA CORC EJEX IGUALSIMPLE LLAVEA contejex LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contbarras ::= DOUBLEE CORA CORC VAL IGUALSIMPLE LLAVEA contval LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contbarras ::= STRINGG TITULOX IGUALSIMPLE CADENA PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TituloX = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contbarras ::= STRINGG TITULOX IGUALSIMPLE IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String simboloJson = "";
                                                                                                                            simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                            if (simboloJson != null){ TituloX=simboloJson; } 
                                                                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // contbarras ::= STRINGG TITULOX IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                              if (simboloJson != null){ TituloX=simboloJson; } 
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // contbarras ::= STRINGG TITULOY IGUALSIMPLE CADENA PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TituloY = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contbarras ::= STRINGG TITULOY IGUALSIMPLE IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String simboloJson = "";
                                                                                                                            simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                            if (simboloJson != null){ TituloY=simboloJson; } 
                                                                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contbarras ::= STRINGG TITULOY IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC PUNTOCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                              if (simboloJson != null){ TituloY =simboloJson; } 
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contbarras",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contejex ::= contejex2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contejex",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contejex ::= contejex contejex2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contejex",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contejex2 ::= CADENA COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ArrayEjex.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contejex2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contejex2 ::= IDD COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String simboloJson = "";
                                                                                                                                         simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                                         if (simboloJson != null){ ArrayEjex.add(simboloJson); } 
                                                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contejex2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contejex2 ::= DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                                         simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                         if (simboloJson != null){ ArrayEjex.add(simboloJson); } 
                                                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contejex2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contejex2 ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayEjex.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contejex2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contejex2 ::= IDD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String simboloJson = "";
                                                                                                                              simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                               if (simboloJson != null){ ArrayEjex.add(simboloJson); } 
                                                                                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contejex2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contejex2 ::= DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                              if (simboloJson != null){ ArrayEjex.add(simboloJson); } 
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contejex2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contval ::= contval2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contval",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contval ::= contval contval2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contval",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contval2 ::= NUMEROS COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 double x = Double.parseDouble(a); ArrayValores.add(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contval2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contval2 ::= IDD COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String simboloJson = "";
                                                                                                                                         simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                                         if (simboloJson != null){ double x = Double.parseDouble(simboloJson);  ArrayValores.add(x); } 
                                                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contval2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contval2 ::= DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String simboloJson = "";
                                                                                                                                         simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                         if (simboloJson != null){ double x = Double.parseDouble(simboloJson);  ArrayValores.add(x); } 
                                                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contval2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contval2 ::= NUMEROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 double x = Double.parseDouble(a); ArrayValores.add(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contval2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contval2 ::= IDD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String simboloJson = "";
                                                                                                                              simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                               if (simboloJson != null){ double x = Double.parseDouble(simboloJson);  ArrayValores.add(x); } 
                                                                                                                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contval2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contval2 ::= DOLAR LLAVEA NVALOR COMA CADENA COMA CADENA LLAVEC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                             if (simboloJson != null){ double x = Double.parseDouble(simboloJson);  ArrayValores.add(x); } 
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contval2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ifs ::= IFF PARENA expresion PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=("\tif "+a+":\n\t"+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifs ::= ELSEIF PARENA expresion PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=("\telif "+a+":\n\t"+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ifs ::= ELSEE LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=("\telse:\n\t"+a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifs",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // imprimir ::= PRINT PARENA escribir PARENC PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=( "\tprint(" +a+ ")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sswitch ::= SWITCHH PARENA expresion PARENC LLAVEA case LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=("\tdef switch(case," + a+"):\n       \tswitch={\n"+b+"\n\t    }");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sswitch",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case ::= ocase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=("\t"+a+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case ::= case ocase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=(a+"\t"+b+"\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ocase ::= CASEE expresion DPUNTOS contenido BREAKK PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=("\t\t"+a+":"+b+",");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ocase",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ocase ::= CASEE expresion DPUNTOS contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=("\t\t"+a+": "+b+",");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ocase",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ocase ::= DEFAULTT DPUNTOS contenido 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=("\t\t"+"4:"+a+",");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ocase",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ocase ::= DEFAULTT DPUNTOS contenido BREAKK PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=("\t\t"+"4:"+a+",");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ocase",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sfor ::= FORR PARENA INTT IDD IGUALSIMPLE NUMEROS PUNTOCOMA IDD relacionales NUMEROS PUNTOCOMA IDD MAS MAS PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t for "+a+" in range("+(Integer.parseInt(b)+1)+","+c+"){\n\t"+d+"\t}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sfor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // swhile ::= WHILEE PARENA expresion PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\twhile " +a+" :\n\t"+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("swhile",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sdowhile ::= DOO LLAVEA contenido LLAVEC WHILEE PARENA IDD relacionales NUMEROS PARENC PUNTOCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=("\twhile True:\n\t" +c+"\t\t"+a+" = "+a+" + 1\n\t"+"\tif ("+a+" "+b+" "+d+"):\n\t\t break");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sdowhile",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // relacionales ::= MAYOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relacionales ::= MENOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // relacionales ::= MAYIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // relacionales ::= MENIGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relacionales ::= IGUAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relacionales ::= DISTINTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variable ::= INTT IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variable ::= DOUBLEE IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variable ::= CHARR IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variable ::= BOOLL IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variable ::= STRINGG IDD PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+"=None");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable ::= INTT IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variable ::= DOUBLEE IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variable ::= CHARR IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variable ::= BOOLL IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variable ::= STRINGG IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable ::= IDD IGUALSIMPLE expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=("\t"+a+c+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= NUMEROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= VERDAD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= FALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= IDD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresion MULTI expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= expresion DIVISION expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= expresion MAYIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= expresion MENIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= expresion NOTT expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+" not "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= expresion ANDD expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+" and "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= expresion ORR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+" or "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= PARENA expresion PARENC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=b+a+c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= MULTI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= DIVISION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // escribir ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // escribir ::= NUMEROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // escribir ::= VERDAD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // escribir ::= FALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // escribir ::= IDD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // escribir ::= escribir MAS escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // escribir ::= escribir MENOS escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // escribir ::= escribir MULTI escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // escribir ::= escribir DIVISION escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // escribir ::= escribir MAYOR escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // escribir ::= escribir MENOR escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // escribir ::= escribir IGUAL escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // escribir ::= escribir MAYIGUAL escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // escribir ::= escribir MENIGUAL escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // escribir ::= escribir NOTT escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+" not "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // escribir ::= escribir DISTINTO escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+c+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // escribir ::= escribir ANDD escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+" and "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // escribir ::= escribir ORR escribir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+" or "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // escribir ::= PARENA escribir PARENC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=b+a+c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // escribir ::= MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // escribir ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // escribir ::= MULTI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // escribir ::= DIVISION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
