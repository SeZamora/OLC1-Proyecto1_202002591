package Analizador;
import java_cup.runtime.*;
import DatosJson.Acciones;
import VariablesGlobales.FuncionesGlobales;
import java.util.ArrayList;
import Errores.Excepcion;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

parser code 

{:
    public static String Titulo = "";
    public static String TituloX= "";
    public static String TituloY="";
    public static String Salida="";
    ArrayList<String> ArrayEjex = new ArrayList<String>();
    ArrayList<Double> ArrayValores = new ArrayList<Double>();
    Acciones acciones = new Acciones();
    FuncionesGlobales funcionesGlobales = new FuncionesGlobales();

    public void llenarAccion(Acciones gestor){
         acciones = gestor ;
    }
    
   public String textoSalida(){
        return Salida;
    }


     ///  declarar un arraylist para los errores sintacticos 
    ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left+1), Integer.toString(s.right+1) ));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , Integer.toString(s.left+1), Integer.toString(s.right+1) ));
    }
        public ArrayList<Excepcion> ArrayError(){
                   return erroresSintacticos;
         }

              public void LimpiarSin(){
                  erroresSintacticos.clear();
              }


:}

terminal String  VERDAD, FALSO, INTT, DOUBLEE, FORR, WHILEE, DOO, PRINT, MAS, PORCENTAJE,  SWITCHH, CASEE, BREAKK, DEFAULTT, MENOS, DIVISION, MULTI, MAYOR;
terminal String IGUALSIMPLE, CHARR, BOOLL, STRINGG, VOIDD, IFF, ELSEIF, ELSEE, MENOR, MAYIGUAL, MENIGUAL, IGUAL, DISTINTO, ANDD,GLOBAL, BARRAS, PIE, DOLAR, NVALOR, CORA, CORC;
terminal String ORR, NOTT, LLAVEA, LLAVEC,  PARENA, PARENC, DPUNTOS, PUNTOCOMA, COMA, CADENA, IDD, NUMEROS, TITULO, EJEX, VAL, TITULOX, TITULOY;


non terminal inicio, ini, main, contenido,funciones, variable,  expresion, sentencias, ifs, relacionales, sswitch,case,ocase, defau, sfor, swhile, sdowhile, imprimir,escribir ;
non terminal vglobal, vpie, decimal, strin, defglob, contglobal, defbarras, contbarras, vbarras, contejex, contejex2, contval, contval2;

/* Declaraciones de precedencia y asociatividad */
precedence left ORR;
precedence left ANDD;
precedence left NOTT;
precedence left MAYOR, MENOR, MAYIGUAL, MENIGUAL, IGUAL, DISTINTO;
precedence left MAS, MENOS;
precedence left MULTI, DIVISION;


start with inicio; 

/* Definición de reglas gramaticales */
inicio ::= ini
;

ini ::= main
;

main ::= VOIDD PARENA PARENC LLAVEA contenido:a LLAVEC {: System.out.println("def main:\n"+a); Salida="def main:\n"+a;:}
;



contenido::= variable:a {: RESULT=(a+"\n");:}
| contenido:a variable:b {: RESULT=(a+""+b+"\n");:}
| ifs:a                              {: RESULT=(a+"\n");:}
| contenido:a ifs:b          {: RESULT=(a+""+b+"\n");:}
| imprimir:a                    {: RESULT=(a+"\n");:}
| contenido:a imprimir:b  {: RESULT=(a+""+b+"\n");:}
| sswitch:a                        {: RESULT=(a+"\n");:}
| contenido:a sswitch:b  {: RESULT=(a+""+b+"\n");:}
| sfor:a                        {: RESULT=(a+"\n");:}
| contenido:a sfor:b     {: RESULT=(a+""+b+"\n");:}
| swhile:a                        {: RESULT=(a+"\n");:}
| contenido:a swhile:b     {: RESULT=(a+""+b+"\n");:}
| sdowhile:a                        {: RESULT=(a+"\n");:}
| contenido:a sdowhile:b     {: RESULT=(a+""+b+"\n");:}
| vglobal                           
| contenido:a vglobal       {: RESULT=(a+"");:}  
| vbarras    
| contenido:a vbarras       {: RESULT=(a+"");:}  
| vpie    
| contenido:a vpie       {: RESULT=(a+"");:}  
| error
;

vglobal ::= GLOBAL PARENA PARENC LLAVEA defglob LLAVEC 
;

defglob ::= contglobal
| defglob contglobal
;

contglobal ::= STRINGG IDD:a IGUALSIMPLE CADENA:b PUNTOCOMA                                                                               {: funcionesGlobales.agregarVariable(a, b); :}
| DOUBLEE IDD:a IGUALSIMPLE NUMEROS:b PUNTOCOMA                                                                                                 {: funcionesGlobales.agregarVariable(a, b); :}
| STRINGG IDD:a IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC PUNTOCOMA        {: String simboloJson = "";
                                                                                                                                                                                                        simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                                                                                         if (simboloJson != null){ funcionesGlobales.agregarVariable(a, simboloJson);}
                                                                                                                                                                                                        :}      
| DOUBLEE IDD:a IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC PUNTOCOMA         {: String simboloJson = "";
                                                                                                                                                                                                        simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                                                                                         if (simboloJson != null){ funcionesGlobales.agregarVariable(a, simboloJson);} 
                                                                                                                                                                                                          :}      
;
vpie ::= PIE PARENA PARENC LLAVEA defbarras LLAVEC {:

                                                                                                 //Ingreso de datos
       DefaultPieDataset dataset = new DefaultPieDataset();
         int tamaño = ArrayEjex.size();
         for (int i = 0; i < tamaño; i++) {
            dataset.setValue(ArrayEjex.get(i), ArrayValores.get(i));
        }
        // Creación de gráfica
        JFreeChart grafica = 
            ChartFactory.createPieChart(Titulo, dataset);
        
                 ArrayValores.clear();
                  ArrayEjex.clear();
        // Mostrar
        ChartFrame frame = new ChartFrame(Titulo, grafica);
        frame.pack();
        frame.setVisible(true);
   :}
;

vbarras ::= BARRAS PARENA PARENC LLAVEA defbarras LLAVEC          {: 
                                                                    
                                                                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                                                                    int tamaño = ArrayEjex.size();

                                                                    for (int i = 0; i < tamaño; i++) {
                                                                        dataset.addValue(ArrayValores.get(i), "Valor", ArrayEjex.get(i));
                                                                    }

                                                                    // Creación de gráfica
                                                                    JFreeChart grafica = 
                                                                        ChartFactory.createBarChart(
                                                                            Titulo, //TITULO
                                                                            TituloX, TituloY, 
                                                                            dataset, 
                                                                            PlotOrientation.VERTICAL,
                                                                            true, true, true);

                                                                       ArrayValores.clear();
                                                                       ArrayEjex.clear();
                                                                    // Mostrar
                                                                    ChartFrame frame = new ChartFrame(Titulo,  grafica);
                                                                    frame.pack();
                                                                    frame.setVisible(true);
                                                             
                                                                     :}
;

defbarras ::= contbarras
| defbarras contbarras
;

contbarras ::= STRINGG  TITULO IGUALSIMPLE CADENA:a PUNTOCOMA {: Titulo = a; :}
| STRINGG  TITULO IGUALSIMPLE IDD:a PUNTOCOMA                                    {: String simboloJson = "";
                                                                                                                            simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                            if (simboloJson != null){ Titulo=simboloJson; } 
                                                                                                                          :}     
|      STRINGG  TITULO IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC PUNTOCOMA   {: String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                              if (simboloJson != null){ Titulo=simboloJson; } 
                                                                                                                            :}   
| STRINGG CORA CORC EJEX IGUALSIMPLE LLAVEA contejex LLAVEC PUNTOCOMA
| DOUBLEE CORA CORC VAL IGUALSIMPLE LLAVEA contval LLAVEC PUNTOCOMA
| STRINGG  TITULOX IGUALSIMPLE CADENA:a PUNTOCOMA                         {: TituloX = a; :}
| STRINGG  TITULOX IGUALSIMPLE IDD:a PUNTOCOMA                                    {: String simboloJson = "";
                                                                                                                            simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                            if (simboloJson != null){ TituloX=simboloJson; } 
                                                                                                                          :}        
| STRINGG  TITULOX IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC PUNTOCOMA       {: String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                              if (simboloJson != null){ TituloX=simboloJson; } 
                                                                                                                            :}   
| STRINGG  TITULOY IGUALSIMPLE CADENA:a PUNTOCOMA                          {: TituloY = a; :}
| STRINGG  TITULOY IGUALSIMPLE IDD:a PUNTOCOMA                                    {: String simboloJson = "";
                                                                                                                            simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                            if (simboloJson != null){ TituloY=simboloJson; } 
                                                                                                                          :}    
| STRINGG  TITULOY IGUALSIMPLE DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC PUNTOCOMA     {: String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                              if (simboloJson != null){ TituloY =simboloJson; } 
                                                                                                                            :}   
;

contejex ::= contejex2
| contejex contejex2
; 
contejex2::= CADENA:a COMA                                                                                      {: ArrayEjex.add(a); :}
| IDD:a COMA                                                                                                                   {: String simboloJson = "";
                                                                                                                                         simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                                         if (simboloJson != null){ ArrayEjex.add(simboloJson); } 
                                                                                                                                        :}   
| DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC COMA         {: String simboloJson = "";
                                                                                                                                         simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                         if (simboloJson != null){ ArrayEjex.add(simboloJson); } 
                                                                                                                                        :}      
| CADENA:a                                                                                                          {: ArrayEjex.add(a); :}
| IDD:a                                                                                                                   {: String simboloJson = "";
                                                                                                                              simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                               if (simboloJson != null){ ArrayEjex.add(simboloJson); } 
                                                                                                                             :}   
| DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC       {: String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                              if (simboloJson != null){ ArrayEjex.add(simboloJson); } 
                                                                                                                            :}   
;

contval ::= contval2
| contval contval2
;
contval2::= NUMEROS:a COMA                                                                                      {: double x = Double.parseDouble(a); ArrayValores.add(x); :}
| IDD:a COMA                                                                                                                   {: String simboloJson = "";
                                                                                                                                         simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                                         if (simboloJson != null){ double x = Double.parseDouble(simboloJson);  ArrayValores.add(x); } 
                                                                                                                                        :}   
| DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC COMA         {: String simboloJson = "";
                                                                                                                                         simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                                         if (simboloJson != null){ double x = Double.parseDouble(simboloJson);  ArrayValores.add(x); } 
                                                                                                                                        :}      
| NUMEROS:a                                                                                                          {: double x = Double.parseDouble(a); ArrayValores.add(x); :}
| IDD:a                                                                                                                   {: String simboloJson = "";
                                                                                                                              simboloJson= funcionesGlobales.obtenerValor(a);
                                                                                                                               if (simboloJson != null){ double x = Double.parseDouble(simboloJson);  ArrayValores.add(x); } 
                                                                                                                             :}   
| DOLAR LLAVEA NVALOR COMA CADENA:b COMA CADENA:c LLAVEC       {: String simboloJson = "";
                                                                                                                              simboloJson= acciones.obtenerSimb(b,c);
                                                                                                                             if (simboloJson != null){ double x = Double.parseDouble(simboloJson);  ArrayValores.add(x); } 
                                                                                                                            :}   
;

ifs::= IFF PARENA expresion:a PARENC LLAVEA contenido:b LLAVEC  {: RESULT=("\tif "+a+":\n\t"+b);:}
| ELSEIF PARENA expresion:a  PARENC LLAVEA contenido:b LLAVEC {: RESULT=("\telif "+a+":\n\t"+b);:}
| ELSEE LLAVEA contenido:a LLAVEC {: RESULT=("\telse:\n\t"+a);:}
;

imprimir ::= PRINT PARENA escribir:a PARENC PUNTOCOMA {:RESULT=( "\tprint(" +a+ ")");:}
;

sswitch ::= SWITCHH PARENA expresion:a PARENC LLAVEA case:b LLAVEC {: RESULT=("\tdef switch(case," + a+"):\n       \tswitch={\n"+b+"\n\t    }");:}
;

case ::= ocase:a {: RESULT=("\t"+a+"\n");:}
| case:a ocase:b {: RESULT=(a+"\t"+b+"\n");:}
;

ocase ::= CASEE  expresion:a DPUNTOS contenido:b BREAKK PUNTOCOMA {:RESULT=("\t\t"+a+":"+b+",");:}
| CASEE  expresion:a DPUNTOS contenido:b {:RESULT=("\t\t"+a+": "+b+",");:}
| DEFAULTT DPUNTOS contenido:a {:RESULT=("\t\t"+"4:"+a+",");:}
| DEFAULTT DPUNTOS contenido:a BREAKK PUNTOCOMA {:RESULT=("\t\t"+"4:"+a+",");:}
;

sfor::= FORR PARENA INTT IDD:a IGUALSIMPLE NUMEROS:b PUNTOCOMA IDD relacionales NUMEROS:c PUNTOCOMA IDD MAS MAS PARENC LLAVEA contenido:d LLAVEC {:RESULT=("\t for "+a+" in range("+(Integer.parseInt(b)+1)+","+c+"){\n\t"+d+"\t}");:}
;

swhile ::= WHILEE PARENA expresion:a PARENC LLAVEA contenido:b LLAVEC  {:RESULT=("\twhile " +a+" :\n\t"+b);:}
;

sdowhile ::=DOO LLAVEA  contenido:c LLAVEC WHILEE  PARENA IDD:a relacionales:b NUMEROS:d PARENC PUNTOCOMA {:RESULT=("\twhile True:\n\t" +c+"\t\t"+a+" = "+a+" + 1\n\t"+"\tif ("+a+" "+b+" "+d+"):\n\t\t break");:}
;

relacionales::=MAYOR:a {:RESULT=a;:}
| MENOR:a {:RESULT=a;:}
| MAYIGUAL:a {:RESULT=a;:}
| MENIGUAL:a {:RESULT=a;:}
| IGUAL:a {:RESULT=a;:}
| DISTINTO:a {:RESULT=a;:}
;

variable ::= INTT IDD:a PUNTOCOMA {:RESULT=("\t"+a+"=None");:}
| DOUBLEE IDD:a PUNTOCOMA  {:RESULT=("\t"+a+"=None");:}
| CHARR IDD:a PUNTOCOMA  {:RESULT=("\t"+a+"=None");:}
| BOOLL IDD:a PUNTOCOMA  {:RESULT=("\t"+a+"=None");:}
| STRINGG IDD:a PUNTOCOMA  {:RESULT=("\t"+a+"=None");:}
| INTT IDD:a IGUALSIMPLE:c expresion:b PUNTOCOMA  {:RESULT=("\t"+a+c+b);:}
| DOUBLEE IDD:a IGUALSIMPLE:c expresion:b PUNTOCOMA {:RESULT=("\t"+a+c+b);:}
| CHARR IDD:a IGUALSIMPLE:c expresion:b PUNTOCOMA  {:RESULT=("\t"+a+c+b);:}
| BOOLL IDD:a IGUALSIMPLE:c expresion:b PUNTOCOMA {:RESULT=("\t"+a+c+b);:}
| STRINGG IDD:a IGUALSIMPLE:c expresion:b PUNTOCOMA  {:RESULT=("\t"+a+c+b);:}
| IDD:a IGUALSIMPLE:c expresion:b PUNTOCOMA {:RESULT=("\t"+a+c+b);:}
;


expresion ::= CADENA:a {:RESULT=a;:}
| NUMEROS:a {:RESULT=a;:}
| VERDAD:a {:RESULT=a;:}
| FALSO:a {:RESULT=a;:}
| IDD:a {:RESULT=a;:}
| expresion:a MAS:c expresion:b {:RESULT=a+c+b;:}
| expresion:a MENOS:c expresion:b {:RESULT=a+c+b;:}
| expresion:a MULTI:c expresion:b {:RESULT=a+c+b;:}
| expresion:a DIVISION:c expresion:b {:RESULT=a+c+b; :}
| expresion:a MAYOR:c expresion:b {:RESULT=a+c+b;:}
| expresion:a MENOR:c expresion:b {:RESULT=a+c+b;:}
| expresion:a IGUAL:c expresion:b {:RESULT=a+c+b;:}
| expresion:a MAYIGUAL:c expresion:b {:RESULT=a+c+b;:}
| expresion:a MENIGUAL:c expresion:b {:RESULT=a+c+b;:}
|  NOTT:c expresion:b {:RESULT=" not "+b;:}
| expresion:a DISTINTO:c expresion:b {:RESULT=a+c+b;:}
| expresion:a ANDD:c expresion:b {:RESULT=a+" and "+b;:}
| expresion:a ORR:c expresion:b {:RESULT=a+" or "+b;:}
| PARENA:b expresion:a PARENC:c {:RESULT=b+a+c;:}
| MAS:a {:RESULT=a;:}
| MENOS:a {:RESULT=a;:}
| MULTI:a {:RESULT=a;:}
| DIVISION:a {:RESULT=a;:}
;

escribir ::= CADENA:a {:RESULT=a;:}
| NUMEROS:a {:RESULT=a;:}
| VERDAD:a {:RESULT=a;:}
| FALSO:a {:RESULT=a;:}
| IDD:a {:RESULT=a;:}
| escribir:a MAS:c escribir:b {:RESULT=a+","+b;:}
| escribir:a MENOS:c escribir:b {:RESULT=a+c+b;:}
| escribir:a MULTI:c escribir:b {:RESULT=a+c+b;:}
| escribir:a DIVISION:c escribir:b {:RESULT=a+c+b; :}
| escribir:a MAYOR:c escribir:b {:RESULT=a+c+b;:}
| escribir:a MENOR:c escribir:b {:RESULT=a+c+b;:}
| escribir:a IGUAL:c escribir:b {:RESULT=a+c+b;:}
| escribir:a MAYIGUAL:c escribir:b {:RESULT=a+c+b;:}
| escribir:a MENIGUAL:c escribir:b {:RESULT=a+c+b;:}
| NOTT:c escribir:b {:RESULT=" not "+b;:}
| escribir:a DISTINTO:c escribir:b {:RESULT=a+c+b;:}
| escribir:a ANDD:c escribir:b {:RESULT=a+" and "+b;:}
| escribir:a ORR:c escribir:b {:RESULT=a+" or "+b;:}
| PARENA:b escribir:a PARENC:c {:RESULT=b+a+c;:}
| MAS:a {:RESULT=a;:}
| MENOS:a {:RESULT=a;:}
| MULTI:a {:RESULT=a;:}
| DIVISION:a {:RESULT=a;:}
;




