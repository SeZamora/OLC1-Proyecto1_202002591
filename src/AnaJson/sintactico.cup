package AnaJson;
import java_cup.runtime.*;
import DatosJson.Acciones;
import java.util.ArrayList;
import Errores.Excepcion;

parser code 

{:
    public static String tituloJ = ""; 
    String Prueba = " valgo lo mismo";
    Acciones acciones = new Acciones();

    public void llenarAccion(Acciones gestor){
         acciones = gestor ;
    }

    public Acciones ver(){
          return acciones;
    }

      ///  declarar un arraylist para los errores sintacticos 
    ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left+1), Integer.toString(s.right+1) ));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        erroresSintacticos.add(new Excepcion("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , Integer.toString(s.left+1), Integer.toString(s.right+1) ));
    }
        public ArrayList<Excepcion> ArrayError(){
                   return erroresSintacticos;
         }

         public void LimpiarSin(){
            erroresSintacticos.clear();
         }


:}

terminal String COMENT, COMENTLINEA, CADENA, ID, NUMEROS, COMA, DPUNTOS, LLAVEA, LLAVEC, NOMBRE;

non terminal inicio, ini, js, contenido, strin, decimal, titulo;

start with inicio; 

/* Definición de reglas gramaticales */
inicio ::= ini
;

ini ::=js
| ini js
| titulo
| ini titulo
;

titulo ::= NOMBRE DPUNTOS CADENA:a {: tituloJ = a; 
                                                                        acciones.createJson(a); :}

                                            
;

js ::= LLAVEA contenido:a LLAVEC 
;

contenido ::= strin
| contenido strin
| decimal
| contenido decimal
| error
;

strin ::= CADENA:a DPUNTOS CADENA:b COMA       {: acciones.addVariable(tituloJ, a, b); :}
| CADENA:a DPUNTOS CADENA:b                             {: acciones.addVariable(tituloJ, a, b); :}
;

decimal ::= CADENA:a DPUNTOS NUMEROS:b COMA {: acciones.addVariable(tituloJ, a, b); :}
| CADENA:a DPUNTOS NUMEROS:b                             {: acciones.addVariable(tituloJ, a, b); :}
;



